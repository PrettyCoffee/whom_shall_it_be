{"version":3,"sources":["data/data.ts","Person/Person.tsx","App.tsx","serviceWorker.js","index.js"],"names":["persons","not_id","name","temp","likes","gender","Person","props","className","data-text","sleep","milliseconds","Promise","resolve","setTimeout","App","useState","undefined","chosen","setChosen","currTemp","fetch","then","res","json","result","main","getSomebody","a","factors","i","length","push","request","XMLHttpRequest","pokeurl","open","send","pokemon","JSON","parse","responseText","weight","base_experience","Date","getTime","stats","Math","floor","random","base_stat","randPers","randNum","console","log","factor","pers","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gPAQaA,G,MAAmB,CAC/B,CACCC,OAAQ,KACRC,KAAM,QACNC,KAAM,GACNC,MAAO,WACPC,QAAQ,GAET,CACCJ,OAAQ,GACRC,KAAM,QACNC,KAAM,GACNC,MAAO,OACPC,QAAQ,GAET,CACCJ,OAAQ,GACRC,KAAM,OACNC,KAAM,GACNC,MAAO,SACPC,QAAQ,GAET,CACCJ,OAAQ,IACRC,KAAM,SACNC,KAAM,GACNC,MAAO,OACPC,QAAQ,GAET,CACCJ,OAAQ,IACRC,KAAM,UACNC,KAAM,GACNC,MAAO,QACPC,QAAQ,GAET,CACCJ,OAAQ,GACRC,KAAM,SACNC,KAAM,GACNC,MAAO,SACPC,QAAQ,KCrCKC,MARf,SAAgBC,GAChB,OACE,uBAAGC,UAAU,qBAAqBC,YAAWF,EAAML,MACxCK,EAAML,OC4EnB,IAAIQ,EAAQ,SAACC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,OAEpCI,EA/Ef,WAAgB,IAAD,EACyBC,wBAASC,GADlC,mBACPC,EADO,KACCC,EADD,KAGVC,OAA4BH,EAChCI,MAAM,4EACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACLL,EAASK,EAAOC,KAAKvB,QAEtB,IAAIwB,EAAW,uCAAG,wCAAAC,EAAA,sDAGjB,IAFIC,EAAmB,GAEdC,EAAI,EAAGA,EAAI9B,EAAQ+B,OAAQD,IACnCD,EAAQG,KAAK,GAITZ,GACHS,EAAQC,KAAOV,EAAW,GAAMpB,EAAQ8B,GAAG3B,MAAM,MACjD0B,EAAQC,IAAM,KAEdD,EAAQC,IAAM9B,EAAQ8B,GAAG3B,KAAO,MAChC0B,EAAQC,IAAM,IAIXG,EAAU,IAAIC,eACdC,EAAU,qCAAsCnC,EAAQ8B,GAAG7B,OAAS,IACxEgC,EAAQG,KAAK,MAAOD,GAAS,GAC7BF,EAAQI,KAAK,MACTC,EAAUC,KAAKC,MAAMP,EAAQQ,cACjCZ,EAAQC,IACNQ,EAAQI,OAASJ,EAAQK,kBACvB,IAAIC,MAAOC,UAAU7C,EAAQ8B,GAAG7B,QACjCqC,EAAQQ,MAAMC,KAAKC,MAAMD,KAAKE,SAAWX,EAAQQ,MAAMf,SAASmB,UAGnErB,EAAQC,IAAM,IACdD,EAAQC,GAAKiB,KAAKC,MAAMnB,EAAQC,IA7BhB,UAiCZqB,EAAWJ,KAAKC,MAAMD,KAAKE,SAAWjD,EAAQ+B,QAC9CqB,EAAUL,KAAKC,MAAsB,IAAhBD,KAAKE,UAC9B9B,EAAUnB,EAAQmD,IAClBE,QAAQC,IAAI,CACXF,QAASA,EACTG,OAAQ1B,EAAQsB,GAChBA,SAAUA,EACVK,KAAMxD,EAAQmD,OAEXtB,EAAQsB,GAAYC,EAAU,GAAKvB,EAAQsB,GAAYC,EAAU,GA1CrD,oEA6CV1C,EAAM,IA7CI,mEAAH,qDAkDhB,OACE,yBAAKF,UAAU,gBACXU,EACA,oCACD,kDACA,kBAAE,EAAWA,GACb,yBAAKV,UAAU,qBAAqBiD,QAAS,WAAKtC,OAAUF,KAA5D,UAEC,oCACD,iDACA,yBAAKT,UAAU,SAASiD,QAAS9B,GAAjC,oDChEe+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhD,MAAK,SAAAiD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,a","file":"static/js/main.025c3c1a.chunk.js","sourcesContent":["export type person = {\r\n\tnot_id: number,\r\n\tname: string,\r\n\ttemp: number,\r\n\tlikes: string,\r\n\tgender: boolean\r\n}\r\n\r\nexport const persons:person[] = [\r\n\t{\r\n\t\tnot_id: 1337,\r\n\t\tname: \"Ponas\",\r\n\t\ttemp: 20,\r\n\t\tlikes: \"Unicorns\",\r\n\t\tgender: true\r\n\t},\r\n\t{\r\n\t\tnot_id: 42,\r\n\t\tname: \"Jemps\",\r\n\t\ttemp: 15,\r\n\t\tlikes: \"Cats\",\r\n\t\tgender: true\r\n\t},\r\n\t{\r\n\t\tnot_id: 42,\r\n\t\tname: \"Amam\",\r\n\t\ttemp: 18,\r\n\t\tlikes: \"Doggos\",\r\n\t\tgender: false\r\n\t},\r\n\t{\r\n\t\tnot_id: 420,\r\n\t\tname: \"Jemmer\",\r\n\t\ttemp: 20,\r\n\t\tlikes: \"Beer\",\r\n\t\tgender: false\r\n\t},\r\n\t{\r\n\t\tnot_id: 666,\r\n\t\tname: \"Philler\",\r\n\t\ttemp: 15,\r\n\t\tlikes: \"Linux\",\r\n\t\tgender: false\r\n\t},\r\n\t{\r\n\t\tnot_id: 34,\r\n\t\tname: \"Holzer\",\r\n\t\ttemp: 25,\r\n\t\tlikes: \"golang\",\r\n\t\tgender: true\r\n\t},\r\n]\r\n\r\n/* Umfrage:\r\nWas ist deine Temperatur?\r\nWelche Zahl?\r\nWähle ein Geschlecht: True | False (Wenn alle das Gleiche nehmen, nehme ich Männer = true)\r\nWas magst du? (Ein Wort)\r\n*/","import React from 'react';\r\n\r\nimport { person } from \"../data/data\"\r\n\r\nfunction Person(props:person) {\r\nreturn (\r\n\t\t<p className=\"result-text glitch\" data-text={props.name}>\r\n            {props.name}\r\n\t\t</p>\r\n\t);\r\n}\r\n\r\nexport default Person;\r\n","import React, {useState} from 'react';\nimport './App.css';\n\nimport { persons, person } from \"./data/data\"\nimport Person from \"./Person/Person\"\nimport { wait } from '@testing-library/react';\n\nfunction App() {\n\tconst [chosen, setChosen]:person|any = useState(undefined)\n\n\tlet currTemp:number|undefined = undefined\n\tfetch(\"https://fcc-weather-api.glitch.me/api/current?lat=48.796043&lon=9.009571\")\n\t.then(res => res.json())\n\t.then(result => {\n\t\tcurrTemp=result.main.temp\n\t})\n\tlet getSomebody = async () => {\n\t\tlet factors:number[] = []\n\t\t//Get factors of persons which are not random\n\t\tfor (let i = 0; i < persons.length; i++) {\n\t\t\tfactors.push(1)\n\n\t\t\t//change factor based on weather\n\t\t\t//Dont question this, it does not make any sense\n\t\t\tif (currTemp) {\n\t\t\t\tfactors[i] *= (currTemp + 0.1 - persons[i].temp)%4.321\n\t\t\t\tfactors[i] += 10\n\t\t\t} else {\n\t\t\t\tfactors[i] *= persons[i].temp % 4.321\n\t\t\t\tfactors[i] += 10\n\t\t\t}\n\n\t\t\t//change factor based on not_id and pokemon and unix date\n\t\t\tlet request = new XMLHttpRequest()\n\t\t\tlet pokeurl = 'https://pokeapi.co/api/v2/pokemon/'+(persons[i].not_id % 806)\n\t\t\trequest.open('GET', pokeurl, false)  // `false` makes the request synchronous\n\t\t\trequest.send(null);\n\t\t\tlet pokemon = JSON.parse(request.responseText)\n\t\t\tfactors[i] *= (\n\t\t\t\t(pokemon.weight / pokemon.base_experience) \n\t\t\t\t* (new Date().getTime()%persons[i].not_id)\n\t\t\t\t% pokemon.stats[Math.floor(Math.random() * pokemon.stats.length)].base_stat\n\t\t\t)\n\n\t\t\tfactors[i] %= 100//(100 / persons.length)\n\t\t\tfactors[i] = Math.floor(factors[i])\n\t\t}\n\n\t\tfor ( ;true; ) {\n\t\t\tlet randPers = Math.floor(Math.random() * persons.length)\n\t\t\tlet randNum = Math.floor(Math.random() * 100)\n\t\t\tsetChosen(persons[randPers])\n\t\t\tconsole.log({\n\t\t\t\trandNum: randNum,\n\t\t\t\tfactor: factors[randPers],\n\t\t\t\trandPers: randPers,\n\t\t\t\tpers: persons[randPers],\n\t\t\t})\n\t\t\tif (factors[randPers] < randNum + 1 && factors[randPers] > randNum - 1) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tawait sleep(10)\n\t\t}\n\n\n\t}\nreturn (\n\t\t<div className=\"main-wrapper\">\n\t\t\t{ (chosen)\n\t\t\t\t? <>\n\t\t\t\t\t<h2>And the victim is:</h2>\n\t\t\t\t\t< Person {...chosen} />\n\t\t\t\t\t<div className=\"button resetButton\" onClick={()=>{setChosen(undefined)}}>Reset</div>\n\t\t\t\t</>\n\t\t\t\t: <>\n\t\t\t\t\t<h2>Whom shall it be?</h2>\n\t\t\t\t\t<div className=\"button\" onClick={getSomebody}>Get a totaly not random victi... eeeh victor!</div>\n\t\t\t\t</>\n\t\t\t}\n\t\t</div>\n\t);\n}\n\nvar sleep = (milliseconds:number) => {\n\treturn new Promise(resolve => setTimeout(resolve, milliseconds))\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}